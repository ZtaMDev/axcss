import { glob } from 'glob';
import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import postcss from 'postcss';
import autoprefixer from 'autoprefixer';
import { processFile } from '../processors/componentProcessor.js';
import { logger, colors } from '../utils/colors.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Process CSS with PostCSS
async function processCSS(content) {
  try {
    const result = await postcss([autoprefixer()]).process(content, { from: undefined });
    return result.css;
  } catch (error) {
    logger.error('Error processing CSS:', error);
    return content;
  }
}

export async function build(options = {}) {
  const silent = options.silent ?? false;
  try {
    if (!silent) logger.info('Searching for .axcss files...');
    
    const files = await glob('**/*.axcss', { ignore: ['node_modules/**', '.axcss/**'] });
    if (files.length === 0) {
      logger.info('No .axcss files found.');
      return;
    }

    if (!silent) logger.info(`Found ${files.length} .axcss file(s)`);

    await fs.mkdir('.axcss', { recursive: true });

    const cssPaths = {}; // Para axcssMain.js
    const importsMain = []; // Para importar todos los proxies en axcssMain.js

    for (const file of files) {
      try {
        let content = await fs.readFile(file, 'utf8');
        content = await processFile(file);
        content = await processCSS(content);

        // --- Guardar CSS compilado ---
        const outputCssPath = path.join('.axcss', file.replace(/\.axcss$/, '.css'));
        await fs.mkdir(path.dirname(outputCssPath), { recursive: true });
        await fs.writeFile(outputCssPath, content, 'utf8');
        if (!silent) logger.compile(`Compiled ${file} -> ${outputCssPath}`);

        // Guardamos la ruta relativa
        const varName = path.basename(file, '.axcss');
        const cssRelativePath = `./${outputCssPath.replace(/\\/g, '/')}`;
        cssPaths[varName] = cssRelativePath;

        // --- Generar proxy .axcss.js ---
        const proxyContent = `
const link = document.createElement('link');
link.rel = 'stylesheet';
link.href = '${cssRelativePath}';
document.head.appendChild(link);
export default '${cssRelativePath}';
        `.trim();

        const proxyPath = outputCssPath.replace(/\.css$/, '.axcss.js');
        await fs.writeFile(proxyPath, proxyContent, 'utf8');
        if (!silent) logger.proxy(`Proxy JS generated: ${proxyPath}`);

        importsMain.push(`import './${proxyPath.replace(/\\/g, '/')}';`);

      } catch (error) {
        // Establecer el código de salida a 1 para indicar que hubo un error
        process.exitCode = 1;
        
        if (!silent) {
          // Para errores de sintaxis, mostrar el mensaje completo
          if (error.message.startsWith('Syntax errors found:')) {
            // Mostrar el mensaje de error completo
            const errorLines = error.message.split('\n');
            logger.error(`${colors.red}${errorLines[0]}${colors.reset}`);
            // Mostrar los detalles del error (líneas adicionales)
            for (let i = 1; i < errorLines.length; i++) {
              if (errorLines[i].trim()) {
                console.error(`   ${colors.red}${errorLines[i]}${colors.reset}`);
              }
            }
          } else {
            // Para otros tipos de errores, mostrar el mensaje normal
            logger.error(`Error processing file ${file}:`);
            console.error(`  ${colors.red}${error.message.split('\n')[0]}${colors.reset}`);
          }
        }
        
        // Continuar con el siguiente archivo en lugar de detenerse
        continue;
      }
    }

    // --- Generar axcssMain.js con todos los imports ---
   // Generar imports correctos en axcssMain.js
  let imports = '';
  for (const varName in cssPaths) {
    const jsPath = cssPaths[varName].replace(/\.css$/, '.axcss.js'); 
    const relativePath = jsPath.replace(/^\.\/\.axcss\//, './'); 
    imports += `import '${relativePath}';\n`;
  }

const mainJsContent = `
/**
 * Auto-generated by AXCSS
 * Import this file to inject all CSS automatically
 */
${imports}
export const axcssMain = ${JSON.stringify(cssPaths, null, 2)};
`;



    await fs.writeFile('.axcss/axcssMain.js', mainJsContent.trim(), 'utf8');
    if (!silent) logger.success('axcssMain.js generated with automatic import of all .axcss.js files!');
    if (!silent) logger.success('Build completed!');
  } catch (error) {
    if (!silent) logger.error(`Build failed: ${error.message}`);
    process.exit(1);
  }
}
